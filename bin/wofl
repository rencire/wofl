#!/bin/bash

help_msg="
Examples:

Create a new project with 'Base' template:

    wofl new <proj_name>
    wofl new <proj_name> -t base

Example w/ Typescript template:

    wofl new <proj_name> -t typescript
"



# Created by argbash-init v2.8.1
# ARG_POSITIONAL_SINGLE([command],[Command.  Currently only supports 'new'],[])
# ARG_POSITIONAL_SINGLE([directory],[Directory name of new project.],[])
# ARG_OPTIONAL_SINGLE([template],[t],[A option with short and long flags and default],[base])
# ARG_OPTIONAL_BOOLEAN([debug],[d],[Debug mode])
# ARG_DEFAULTS_POS()
# ARG_HELP([Create a project based off of nix and git hooks workflow.],[$help_msg])
# ARG_VERSION([echo $0 v0.1])
# ARGBASH_SET_INDENT([  ])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
  local _ret=$2
  test -n "$_ret" || _ret=1
  test "$_PRINT_HELP" = yes && print_help >&2
  echo "$1" >&2
  exit ${_ret}
}


begins_with_short_option()
{
  local first_option all_short_options='tdhv'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_command=
_arg_directory=
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_template="base"
_arg_debug="off"


print_help()
{
  printf '%s\n' "Create a project based off of nix and git hooks workflow."
  printf 'Usage: %s [-t|--template <arg>] [-d|--(no-)debug] [-h|--help] [-v|--version] <command> <directory>\n' "$0"
  printf '\t%s\n' "<command>: Command.  Currently only supports 'new'"
  printf '\t%s\n' "<directory>: Directory name of new project."
  printf '\t%s\n' "-t, --template: A option with short and long flags and default (default: 'base')"
  printf '\t%s\n' "-d, --debug, --no-debug: Debug mode (off by default)"
  printf '\t%s\n' "-h, --help: Prints help"
  printf '\t%s\n' "-v, --version: Prints version"
  printf '\n%s\n' "$help_msg"
}


parse_commandline()
{
  _positionals_count=0
  while test $# -gt 0
  do
    _key="$1"
    case "$_key" in
      -t|--template)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_template="$2"
        shift
        ;;
      --template=*)
        _arg_template="${_key##--template=}"
        ;;
      -t*)
        _arg_template="${_key##-t}"
        ;;
      -d|--no-debug|--debug)
        _arg_debug="on"
        test "${1:0:5}" = "--no-" && _arg_debug="off"
        ;;
      -d*)
        _arg_debug="on"
        _next="${_key##-d}"
        if test -n "$_next" -a "$_next" != "$_key"
        then
          { begins_with_short_option "$_next" && shift && set -- "-d" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
        fi
        ;;
      -h|--help)
        print_help
        exit 0
        ;;
      -h*)
        print_help
        exit 0
        ;;
      -v|--version)
        echo $0 v0.1
        exit 0
        ;;
      -v*)
        echo $0 v0.1
        exit 0
        ;;
      *)
        _last_positional="$1"
        _positionals+=("$_last_positional")
        _positionals_count=$((_positionals_count + 1))
        ;;
    esac
    shift
  done
}


handle_passed_args_count()
{
  local _required_args_string="'command' and 'directory'"
  test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
  test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
  local _positional_name _shift_for=$1
  _positional_names="_arg_command _arg_directory "

  shift "$_shift_for"
  for _positional_name in ${_positional_names}
  do
    test $# -gt 0 || break
    eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
    shift
  done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash



## Exit on errors
set -e
function cleanup () {
  rm -rf $_arg_directory
}
trap cleanup ERR


# Path helper variables
bin_path="$(dirname $0)"
root_path="$(dirname $bin_path)"
templates_path="$root_path/templates"


if [ $_arg_debug = 'on' ]; then
  echo '[debug]: 0 = $0'
  echo '[debug]: bin_path = $bin_path'
  echo '[debug]: root_path = $root_path'
  echo '[debug]: templates_path = $templates_path'
fi

# Main logic

if [ "$_arg_command" != "new" ]; then
  echo "Only 'new' command is supported"
else
  if [ -z "$_arg_directory" ]; then
    echo "Must supply a directory name"
  fi

  mkdir -p $_arg_directory
  rsync -r "$templates_path/$_arg_template/" "./$_arg_directory/"

  # TODO change these to debug logs
  echo "Created folder '$_arg_directory' with template '$_arg_template'"

  echo "Navigating into '$_arg_directory'..."
  cd $_arg_directory

  echo "Initializing git repo..."
  git init

  # Setup git hooks
  echo "Setting up git hooks..."
  nix-shell --run 'lefthook install'

  echo "Done"
fi

# ] <-- needed because of Argbash
